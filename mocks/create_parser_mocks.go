// Code generated by MockGen. DO NOT EDIT.
// Source: create_parser.go

// Package jwtmocks is a generated GoMock package.
package jwtmocks

import (
	reflect "reflect"

	jwt "github.com/amidgo/jwt"
	gomock "github.com/golang/mock/gomock"
)

// MockTokenParser is a mock of TokenParser interface.
type MockTokenParser struct {
	ctrl     *gomock.Controller
	recorder *MockTokenParserMockRecorder
}

// MockTokenParserMockRecorder is the mock recorder for MockTokenParser.
type MockTokenParserMockRecorder struct {
	mock *MockTokenParser
}

// NewMockTokenParser creates a new mock instance.
func NewMockTokenParser(ctrl *gomock.Controller) *MockTokenParser {
	mock := &MockTokenParser{ctrl: ctrl}
	mock.recorder = &MockTokenParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenParser) EXPECT() *MockTokenParserMockRecorder {
	return m.recorder
}

// ParseToken mocks base method.
func (m *MockTokenParser) ParseToken(accessToken string) (jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockTokenParserMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockTokenParser)(nil).ParseToken), accessToken)
}

// MockTokenCreator is a mock of TokenCreator interface.
type MockTokenCreator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenCreatorMockRecorder
}

// MockTokenCreatorMockRecorder is the mock recorder for MockTokenCreator.
type MockTokenCreatorMockRecorder struct {
	mock *MockTokenCreator
}

// NewMockTokenCreator creates a new mock instance.
func NewMockTokenCreator(ctrl *gomock.Controller) *MockTokenCreator {
	mock := &MockTokenCreator{ctrl: ctrl}
	mock.recorder = &MockTokenCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenCreator) EXPECT() *MockTokenCreatorMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenCreator) CreateToken(payload jwt.Payload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenCreatorMockRecorder) CreateToken(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenCreator)(nil).CreateToken), payload)
}

// MockTokenCreateParser is a mock of TokenCreateParser interface.
type MockTokenCreateParser struct {
	ctrl     *gomock.Controller
	recorder *MockTokenCreateParserMockRecorder
}

// MockTokenCreateParserMockRecorder is the mock recorder for MockTokenCreateParser.
type MockTokenCreateParserMockRecorder struct {
	mock *MockTokenCreateParser
}

// NewMockTokenCreateParser creates a new mock instance.
func NewMockTokenCreateParser(ctrl *gomock.Controller) *MockTokenCreateParser {
	mock := &MockTokenCreateParser{ctrl: ctrl}
	mock.recorder = &MockTokenCreateParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenCreateParser) EXPECT() *MockTokenCreateParserMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenCreateParser) CreateToken(payload jwt.Payload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenCreateParserMockRecorder) CreateToken(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenCreateParser)(nil).CreateToken), payload)
}

// ParseToken mocks base method.
func (m *MockTokenCreateParser) ParseToken(accessToken string) (jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockTokenCreateParserMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockTokenCreateParser)(nil).ParseToken), accessToken)
}

// MockEncodeDecoder is a mock of EncodeDecoder interface.
type MockEncodeDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncodeDecoderMockRecorder
}

// MockEncodeDecoderMockRecorder is the mock recorder for MockEncodeDecoder.
type MockEncodeDecoderMockRecorder struct {
	mock *MockEncodeDecoder
}

// NewMockEncodeDecoder creates a new mock instance.
func NewMockEncodeDecoder(ctrl *gomock.Controller) *MockEncodeDecoder {
	mock := &MockEncodeDecoder{ctrl: ctrl}
	mock.recorder = &MockEncodeDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncodeDecoder) EXPECT() *MockEncodeDecoderMockRecorder {
	return m.recorder
}

// DecodeString mocks base method.
func (m *MockEncodeDecoder) DecodeString(s string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeString", s)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeString indicates an expected call of DecodeString.
func (mr *MockEncodeDecoderMockRecorder) DecodeString(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeString", reflect.TypeOf((*MockEncodeDecoder)(nil).DecodeString), s)
}

// EncodeToString mocks base method.
func (m *MockEncodeDecoder) EncodeToString(segment []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeToString", segment)
	ret0, _ := ret[0].(string)
	return ret0
}

// EncodeToString indicates an expected call of EncodeToString.
func (mr *MockEncodeDecoderMockRecorder) EncodeToString(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeToString", reflect.TypeOf((*MockEncodeDecoder)(nil).EncodeToString), segment)
}
